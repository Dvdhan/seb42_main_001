Index: Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codestates.server_001_withskey.global.security;\r\n\r\nimport io.jsonwebtoken.*;\r\nimport io.jsonwebtoken.io.Decoders;\r\nimport io.jsonwebtoken.io.Encoders;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport io.jsonwebtoken.security.SignatureException;\r\nimport lombok.Getter;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.Key;\r\nimport java.time.Instant;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n// JWT AccessToken, RefreshToken 생성\r\n\r\n@Component\r\npublic class JwtTokenizer {\r\n// remove v1\r\n//    private final JwtVerificationFilter jwtVerificationFilter;\r\n\r\n    @Getter\r\n    @Value(\"${jwt.key.secret}\")\r\n    private String secretKey;\r\n\r\n    @Getter\r\n    @Value(\"${jwt.access-token-expiration-minutes}\")\r\n    private int accessTokenExpirationMinutes;\r\n\r\n    @Getter\r\n    @Value(\"${jwt.refresh-token-expiration-minutes}\")\r\n    private int refreshTokenExpirationMinutes;\r\n\r\n//    public JwtTokenizer(JwtVerificationFilter jwtVerificationFilter) {\r\n//        this.jwtVerificationFilter = jwtVerificationFilter;\r\n//    }\r\n\r\n    public String encodeBase64SecretKey (String secretKey) {\r\n        return Encoders.BASE64.encode(secretKey.getBytes(StandardCharsets.UTF_8));\r\n    }\r\n\r\n    public String generateAccessToken(Map<String, Object> claims,\r\n                                      String subject,\r\n                                      Date expiration,\r\n                                      String base64EncodedSecretKey) {\r\n        Key key = getKeyFromBase64EncodedKey(base64EncodedSecretKey);\r\n        return Jwts.builder()\r\n                .setClaims(claims)\r\n                .setSubject(subject)\r\n                .setIssuedAt(Calendar.getInstance().getTime())\r\n                .setExpiration(expiration)\r\n                .signWith(key)\r\n                .compact();\r\n    }\r\n    public String generateRefreshToken(String subject,\r\n                                       Date expiration,\r\n                                       String base64EncodedSecretKey) {\r\n        Key key = getKeyFromBase64EncodedKey(base64EncodedSecretKey);\r\n\r\n        String refreshToken = Jwts.builder()\r\n                .setSubject(subject)\r\n                .setIssuedAt(Calendar.getInstance().getTime())\r\n                .setExpiration(expiration)\r\n                .signWith(key)\r\n                .compact();\r\n        return refreshToken;\r\n    }\r\n    public String regenerateAccessToken(String refreshToken) {\r\n        try {\r\n            Jws<Claims> refreshTokenClaims = getClaims(refreshToken, encodeBase64SecretKey(secretKey));\r\n            Instant refreshTokenExpiration = Instant.ofEpochSecond((Long)refreshTokenClaims.getBody().get(\"exp\"));\r\n            if(refreshTokenExpiration.isBefore(Instant.now())) {\r\n                throw new RuntimeException(\"RefreshToken has expired\");\r\n            }\r\n            String email = refreshTokenClaims.getBody().getSubject();\r\n            Date accessTokenExpiration = getTokenExpiration(accessTokenExpirationMinutes);\r\n            Map<String, Object> accessTokenClaims = new HashMap<>();\r\n            accessTokenClaims.put(\"email\",email);\r\n            String newAccessToken = generateAccessToken(accessTokenClaims, email, accessTokenExpiration, encodeBase64SecretKey(secretKey));\r\n            return newAccessToken;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public Jws<Claims> getClaims(String jws, String base64EncodedSecretKey) {\r\n        Key key = getKeyFromBase64EncodedKey(base64EncodedSecretKey);\r\n\r\n        Jws<Claims> claims = Jwts.parserBuilder()\r\n                .setSigningKey(key)\r\n                .build()\r\n                .parseClaimsJws(jws);\r\n        return claims;\r\n    }\r\n\r\n    public void verifySignature(String jws, String base64EncodedSecretKey) {\r\n        Key key = getKeyFromBase64EncodedKey(base64EncodedSecretKey);\r\n\r\n        Jwts.parserBuilder()\r\n                .setSigningKey(key)\r\n                .build()\r\n                .parseClaimsJws(jws);\r\n    }\r\n    public Date getTokenExpiration(int expirationMinutes) {\r\n        Calendar calendar = Calendar.getInstance();\r\n        calendar.add(Calendar.MINUTE, expirationMinutes);\r\n        Date expiration = calendar.getTime();\r\n\r\n        return expiration;\r\n    }\r\n    private Key getKeyFromBase64EncodedKey (String base64EncodedSecretKey) {\r\n        byte[] keyBytes = Decoders.BASE64.decode(base64EncodedSecretKey);\r\n        Key key = Keys.hmacShaKeyFor(keyBytes);\r\n        return key;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java b/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java
--- a/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java	(revision 1c840dbaf40a808d28ca99a9d66e1afd43fde8b2)
+++ b/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java	(date 1678670781798)
@@ -50,7 +50,9 @@
                                       String subject,
                                       Date expiration,
                                       String base64EncodedSecretKey) {
+
         Key key = getKeyFromBase64EncodedKey(base64EncodedSecretKey);
+
         return Jwts.builder()
                 .setClaims(claims)
                 .setSubject(subject)
@@ -70,21 +72,31 @@
                 .setExpiration(expiration)
                 .signWith(key)
                 .compact();
+
         return refreshToken;
     }
     public String regenerateAccessToken(String refreshToken) {
         try {
             Jws<Claims> refreshTokenClaims = getClaims(refreshToken, encodeBase64SecretKey(secretKey));
+
             Instant refreshTokenExpiration = Instant.ofEpochSecond((Long)refreshTokenClaims.getBody().get("exp"));
+
             if(refreshTokenExpiration.isBefore(Instant.now())) {
                 throw new RuntimeException("RefreshToken has expired");
             }
+
             String email = refreshTokenClaims.getBody().getSubject();
+
             Date accessTokenExpiration = getTokenExpiration(accessTokenExpirationMinutes);
+
             Map<String, Object> accessTokenClaims = new HashMap<>();
+
             accessTokenClaims.put("email",email);
+
             String newAccessToken = generateAccessToken(accessTokenClaims, email, accessTokenExpiration, encodeBase64SecretKey(secretKey));
+
             return newAccessToken;
+
         } catch (Exception e) {
             throw new RuntimeException(e);
         }
@@ -108,6 +120,7 @@
                 .build()
                 .parseClaimsJws(jws);
     }
+
     public Date getTokenExpiration(int expirationMinutes) {
         Calendar calendar = Calendar.getInstance();
         calendar.add(Calendar.MINUTE, expirationMinutes);
@@ -115,6 +128,7 @@
 
         return expiration;
     }
+
     private Key getKeyFromBase64EncodedKey (String base64EncodedSecretKey) {
         byte[] keyBytes = Decoders.BASE64.decode(base64EncodedSecretKey);
         Key key = Keys.hmacShaKeyFor(keyBytes);
Index: Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codestates.server_001_withskey.global.advice;\r\n\r\nimport lombok.Getter;\r\n\r\n@Getter\r\npublic enum ExceptionCode {\r\n\r\n    MEMBER_NOT_FOUND(402,\"회원이 존재하지 않습니다.\"),\r\n    EMAIL_ALREADY_EXIST(403,\"이미 가입된 이메일 입니다\"),\r\n    DATA_IS_EMPTY(404,\"저장된 데이터가 없습니다.\"),\r\n    METHOD_NOT_ALLOWED(405,\"요청에 적합한 메서드가 아닙니다\"),\r\n    INTERNAL_SERVER_ERROR(406,\"Null Point Exception\");\r\n\r\n    @Getter\r\n    int status;\r\n    @Getter\r\n    String message;\r\n\r\n    ExceptionCode(int status, String message) {\r\n        this.status = status;\r\n        this.message = message;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java b/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java
--- a/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java	(revision 1c840dbaf40a808d28ca99a9d66e1afd43fde8b2)
+++ b/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java	(date 1678670577973)
@@ -9,7 +9,8 @@
     EMAIL_ALREADY_EXIST(403,"이미 가입된 이메일 입니다"),
     DATA_IS_EMPTY(404,"저장된 데이터가 없습니다."),
     METHOD_NOT_ALLOWED(405,"요청에 적합한 메서드가 아닙니다"),
-    INTERNAL_SERVER_ERROR(406,"Null Point Exception");
+    INTERNAL_SERVER_ERROR(406,"Null Point Exception"),
+    BUSINESS_LOGIC_NOT_IMPLEMENTED(404, "비즈니스 로직이 구현되지 않았습니다.");
 
     @Getter
     int status;
Index: Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.codestates.server_001_withskey.global.security;\r\n\r\nimport io.jsonwebtoken.ExpiredJwtException;\r\nimport io.jsonwebtoken.security.SignatureException;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.time.Instant;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n// OAuth2 인증에 성공하면 FE 앱 쪽에서 request를 전송할 때 마다\r\n// Authorization header에 실어 보내는 Access Token에 대한\r\n// 검증을 수행하는 역\r\n// add v2\r\n@Component\r\npublic class JwtVerificationFilter extends OncePerRequestFilter {\r\n    private final JwtTokenizer jwtTokenizer;\r\n    private final withsKeyAuthorityUtils authorityUtils;\r\n\r\n    public JwtVerificationFilter(JwtTokenizer jwtTokenizer, withsKeyAuthorityUtils authorityUtils) {\r\n        this.jwtTokenizer = jwtTokenizer;\r\n        this.authorityUtils = authorityUtils;\r\n    }\r\n    @Override\r\n    protected void doFilterInternal(HttpServletRequest request,\r\n                                    HttpServletResponse response,\r\n                                    FilterChain filterChain) throws ServletException, IOException {\r\n        String authorizationHeader = request.getHeader(\"Authorization\");\r\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\r\n            String token = authorizationHeader.replace(\"Bearer \",\"\");\r\n            try {\r\n                Map<String, Object> claims = verifyJws(token);\r\n                setAuthenticationToContext(claims);\r\n            } catch (SignatureException se) {\r\n                request.setAttribute(\"exception\", se);\r\n            } catch (ExpiredJwtException ee) {\r\n                // token이 만료가 될 경우, Request header에서 Refresh Token을 가져온다.\r\n                String refreshToken = request.getHeader(\"Refresh\");\r\n                Map<String, Object> refreshTokenClaims = verifyJws(refreshToken);\r\n                Instant refreshTokenExpiration = Instant.ofEpochSecond((Long) refreshTokenClaims.get(\"exp\"));\r\n                if (refreshTokenExpiration.isBefore(Instant.now())) {\r\n                    throw new RuntimeException(\"RefreshToken has expired\");\r\n                }\r\n                // Regenerate new Access Token from JwtTokenizer class.\r\n                String newAccessToken = jwtTokenizer.regenerateAccessToken(refreshToken);\r\n                // Set new Access Token to response header\r\n                response.setHeader(\"Authorization\", \"Bearer \" + newAccessToken);\r\n            } catch (Exception e) {\r\n                request.setAttribute(\"exception\", e);\r\n            }\r\n        }\r\n        filterChain.doFilter(request, response);\r\n    }\r\n    @Override\r\n    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {\r\n        String authorization = request.getHeader(\"Authorization\");\r\n        return authorization == null || !authorization.startsWith(\"Bearer\");\r\n    }\r\n    private Map<String, Object> verifyJws(String jws) {\r\n        String base64EncodedSecretKey = jwtTokenizer.encodeBase64SecretKey(jwtTokenizer.getSecretKey());\r\n        Map<String, Object> claims = jwtTokenizer.getClaims(jws, base64EncodedSecretKey).getBody();\r\n        return claims;\r\n    }\r\n    private void setAuthenticationToContext(Map<String, Object> claims) {\r\n        Long memberId = (Long) claims.get(\"memberId\");\r\n        List<GrantedAuthority> authorities = authorityUtils.createAuthorities((List)claims.get(\"roles\"));\r\n        Authentication authentication = new UsernamePasswordAuthenticationToken(memberId,null,authorities);\r\n        SecurityContextHolder.getContext().setAuthentication(authentication);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java b/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java
--- a/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java	(revision 1c840dbaf40a808d28ca99a9d66e1afd43fde8b2)
+++ b/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java	(date 1678670865932)
@@ -46,14 +46,21 @@
                 setAuthenticationToContext(claims);
             } catch (SignatureException se) {
                 request.setAttribute("exception", se);
+
             } catch (ExpiredJwtException ee) {
+
                 // token이 만료가 될 경우, Request header에서 Refresh Token을 가져온다.
                 String refreshToken = request.getHeader("Refresh");
+
                 Map<String, Object> refreshTokenClaims = verifyJws(refreshToken);
+
+                //TODO : 해당 객체 타입의 역할을 알기
                 Instant refreshTokenExpiration = Instant.ofEpochSecond((Long) refreshTokenClaims.get("exp"));
+
                 if (refreshTokenExpiration.isBefore(Instant.now())) {
                     throw new RuntimeException("RefreshToken has expired");
                 }
+
                 // Regenerate new Access Token from JwtTokenizer class.
                 String newAccessToken = jwtTokenizer.regenerateAccessToken(refreshToken);
                 // Set new Access Token to response header
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"31bbf154-e014-4da8-82de-0bd10d844b01\" name=\"Changes\" comment=\"✨ feat: 기초적인 이미지 컨트롤러, 서비스 계층 구현. 간단한 저장 기능만 구현하였음.\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$/Server_001_WithsKey\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"Server_001_WithsKey\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/be\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"feat/images\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Mlk5J6rc6pyq487COVCdMnsTz5\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,\r\n    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,\r\n    &quot;RequestMappingsPanelOrder2&quot;: &quot;2&quot;,\r\n    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,\r\n    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,\r\n    &quot;RequestMappingsPanelWidth2&quot;: &quot;75&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/MEcmp/Desktop/Main_Proj/main/Server_001_WithsKey/src/main/resources/static&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;File.Encoding&quot;,\r\n    &quot;spring.configuration.checksum&quot;: &quot;95c0719ffddf197aae58f1076361a8a0&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\MEcmp\\Desktop\\Main_Proj\\main\\Server_001_WithsKey\\src\\main\\resources\\static\" />\r\n      <recent name=\"C:\\Users\\MEcmp\\Desktop\\Main_Proj\\main\\Server_001_WithsKey\\src\\main\\resources\\templates\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Server001WithsKeyApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"Server_001_WithsKey.main\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.codestates.server_001_withskey.Server001WithsKeyApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task id=\"LOCAL-00001\" summary=\"fix: .gitignore\">\r\n      <created>1678347398512</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678347398512</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"\uD83D\uDD27 chore: application.yml h2 설정 및 로깅 레벨 추가\">\r\n      <created>1678348105265</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678348105265</updated>\r\n    </task>\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"31bbf154-e014-4da8-82de-0bd10d844b01\" name=\"Changes\" comment=\"\uD83D\uDD27 chore: application.yml h2 설정 및 로깅 레벨 추가\" />\r\n      <created>1678349375466</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678349375466</updated>\r\n      <workItem from=\"1678349377121\" duration=\"2749000\" />\r\n      <workItem from=\"1678356365117\" duration=\"1164000\" />\r\n      <workItem from=\"1678358397370\" duration=\"397000\" />\r\n      <workItem from=\"1678368123788\" duration=\"536000\" />\r\n      <workItem from=\"1678368737570\" duration=\"1193000\" />\r\n      <workItem from=\"1678369974315\" duration=\"280000\" />\r\n      <workItem from=\"1678372597529\" duration=\"789000\" />\r\n      <workItem from=\"1678404668724\" duration=\"10082000\" />\r\n      <workItem from=\"1678439981267\" duration=\"373000\" />\r\n      <workItem from=\"1678440464683\" duration=\"659000\" />\r\n      <workItem from=\"1678457371394\" duration=\"698000\" />\r\n      <workItem from=\"1678494403287\" duration=\"7241000\" />\r\n      <workItem from=\"1678669235409\" duration=\"949000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"\uD83D\uDD27 feat: 패키지 구조 뼈대 완성 및 commonResponseDto 추가\">\r\n      <created>1678369166104</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678369166104</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"✨ feat: 기본 이미지 컨트롤러 및 이미지 클래스 Concept 추가\">\r\n      <created>1678457444141</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678457444141</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"✨ feat: 기초적인 이미지 컨트롤러, 서비스 계층 구현. 간단한 저장 기능만 구현하였음.\">\r\n      <created>1678518989099</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678518989099</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/feat/images\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"fix: .gitignore\" />\r\n    <MESSAGE value=\" chore: application.yml h2 설정 및 로깅 레벨 추가\" />\r\n    <MESSAGE value=\" feat: 패키지 구조 뼈대 완성 및 commonResponseDto 추가\" />\r\n    <MESSAGE value=\"✨ feat: 기본 이미지 컨트롤러 및 이미지 클래스 Concept 추가\" />\r\n    <MESSAGE value=\"✨ feat: 기초적인 이미지 컨트롤러, 서비스 계층 구현. 간단한 저장 기능만 구현하였음.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"✨ feat: 기초적인 이미지 컨트롤러, 서비스 계층 구현. 간단한 저장 기능만 구현하였음.\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1c840dbaf40a808d28ca99a9d66e1afd43fde8b2)
+++ b/.idea/workspace.xml	(date 1678670769529)
@@ -4,7 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="31bbf154-e014-4da8-82de-0bd10d844b01" name="Changes" comment="✨ feat: 기초적인 이미지 컨트롤러, 서비스 계층 구현. 간단한 저장 기능만 구현하였음." />
+    <list default="true" id="d05f5a1f-414e-4b2d-84de-7305ff180eac" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/advice/ExceptionCode.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtTokenizer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java" beforeDir="false" afterPath="$PROJECT_DIR$/Server_001_WithsKey/src/main/java/com/codestates/server_001_withskey/global/security/JwtVerificationFilter.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
